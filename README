# project1# project1## Automated ELK Stack Deployment


The files in this repository were used to configure the network depicted below.

https://github.com/waleedkhider123/project1/tree/master/images-diagram

These files have been tested and used to generate a live ELK deployment on Azure. They can be used to either recreate the entire deployment pictured above. 
Alternatively, select portions of the _playbook file may be used to install only certain pieces of it, such as Filebeat.

  - https://github.com/waleedkhider123/project1/tree/master/ansible-linux
 
This document contains the following details:
- Description of the Topology
- Access Policies
- ELK Configuration
  - Beats in Use
  - Machines Being Monitored
- How to Use the Ansible Build


### Description of the Topology

The main purpose of this network is to expose a load-balanced and monitored instance of DVWA, the D*mn Vulnerable Web Application.
Load balancing ensures that the application will be highly available and reliable, in addition to restricting entry to the network.
- _ By using jump box, we will prevent VM’s expose to the public and limit the entry point via Remote Desktop Protocol (RDP) on premise network. 
Also, we can restrict the IP addresses to communicate with the Jump box.
Integrating an ELK server allows users to easily monitor the vulnerable VMs for changes to the specific files and system track.
- Filebeat monitors, collects log events and files or location and forward them to Elasticsearch or Logstash for indexing.

Metricbeat record metrics and statistics and send them to the output, such as Elasticsearch or Logstash


The configuration details of each machine may be found below.
_ 
| Name     | Function    | IP Address | Operating System |
|--------  |-------------|---------- -|----------------- |
| Jump Box | Gateway     | 10.0.0.1   |    Linux         |
| ELK      | Monitor-vm  | 10.1.0.4   |    Linux         |
| WEB-1    | DVWA-VM     | 10.0.0.5   |    Linux         |
| WEB-2    | DVWA-VM     | 10.0.0.6   |    Linux         |  

### Access Policies

The machines on the internal network are not exposed to the public Internet. 


Only the Jump box machine can accept connections from the Internet. Access to this machine is only allowed from the following IP addresses:
67.176.138.137 ,40.78.130.141 ,13.89.37.198
Machines within the network can only be accessed by _Jump box_10.0.0.4


A summary of the access policies in place can be found in the table below.


| Name               | Publicly Accessible | Allowed IP Addresses  |
|------------------  |-------------------  |---------------------- |
|azure LB            |   yes               |  AzureLoadBalancer    |
|Home WEB            |   yes               |    67.176.138.137     |             
|Jumpboxaccess       |   yes               |    10.0.0.4           |
| testnetcap         |   no                |    10.0.0.5,10.0.0.6  |
|allow ssh from my ip|   yes               |    67.176.138.137     |
|defult-allow-ssh    |   yes               |    10.0.0.4           |
|port 5601           |   yes               |    67.176.138.137     |

### Elk Configuration


Ansible was used to automate configuration of the ELK machine. No configuration was performed manually, which is advantageous because
You can quickly and easily deploy apps. also makes it easier to create computer software and processes

The playbook implements the following tasks:
-Install docker.io
-Install python3-pip
-Install Docker module
-Increase virtual memory


The following screenshot displays the result of running `docker ps` after successfully configuring the ELK instance.

https://github.com/waleedkhider123/project1/tree/master/images-diagram

### Target Machines & Beats
This ELK server is configured to monitor the following machines:
10.0.0.5,10.0.0.6
 
We have installed the following Beats on these machines:
-Filebeat
-Metricbeat
These Beats allow us to collect the following information from each machine:
- Filebeat collects data about the file system.
- Metricbeat collects machine metrics, such as uptime.
### Using the Playbook
In order to use the playbook, you will need to have an Ansible control node already configured. Assuming you have such a control node provisioned: 


SSH into the control node and follow the steps below:
- Copy the elk-playbook.yml file to the Ansible container.
- Update the inventory file to include the IP address of the ELK VM
- Run the playbook, and navigate to Ansible container to check that the installation worked as expected by running: docker ps.
 
- _ playbook is the file that installs Docker and configures the container. Through a playbook, you can designate specific roles to some of the hosts 
and other roles to other hosts. we copied this file to the ansible container-e updated the Ansible's inventory to include the IP address of the ELK VM 10.1.0.4 
by editing :
 # /etc/ansible/hosts, add a group called [elk] and specify the IP address of the ELK VM 10.1.0.4


- _Which URL do you navigate to in order to check that the ELK server is running?
http://[ELK-VM.External.IP]:5601/app/kibana. 

- commands the user will need to run to download the playbook, update the files, etc. 
  - ansible-playbook myplaybook.yml# ansible-playbook myplaybook.yml
  - nano /etc/ansible/hosts
  - curl https://gist.githubusercontent.com/slape/5cc350109583af6cbe577bbcc0710c93/raw/eca603b72586fbe148c11f9c87bf96a63cb25760/Filebeat > 
  /etc/ansible/files/filebeat-config.yml
  - /etc/ansible/files/filebeat-config.yml
  - ansible-playbook filebeat-playbook.yml
  - dpkg -i filebeat-7.4.0-amd64.deb
  _ filebeat modules enable system
  - filebeat setup
  - filebeat -e
